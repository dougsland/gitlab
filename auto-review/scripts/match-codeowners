import os
import gitlab
import fnmatch

# Constants
REPLACE_UNUSED_WITH_GENERAL_REVIEWERS = True  # Set this to False to disable replacing 'unused' with general reviewers
INCLUDE_MR_AUTHOR_AS_ASSIGNEE = True  # Set this to False to exclude the MR author as an assignee
KEEP_EXISTING_ASSIGNEES_AND_REVIEWERS = True  # Set this to False to remove existing assignees and reviewers not in CODEOWNERS

# Get the GitLab token from environment variables
GITLAB_TOKEN = os.getenv('GITLAB_TOKEN')

# GitLab automatically sets environment variables for each CI/CD job.
#   - CI_PROJECT_ID        -> Project ID
#   - CI_MERGE_REQUEST_IID -> Merge Request ID
PROJECT_ID = os.getenv('CI_PROJECT_ID')
MERGE_REQUEST_IID = os.getenv('CI_MERGE_REQUEST_IID')

# Check if environment variables are available
if not all([GITLAB_TOKEN, PROJECT_ID, MERGE_REQUEST_IID]):
    raise EnvironmentError("Required environment variables are missing")

# Create a GitLab instance
gl = gitlab.Gitlab(
    'https://gitlab.cee.DOMAIN.com',
    private_token=GITLAB_TOKEN,
    ssl_verify=False)  # Install IT certificate in the system and remove this line

# Get the project
project = gl.projects.get(PROJECT_ID)

# Get the merge request
merge_request = project.mergerequests.get(MERGE_REQUEST_IID)

# Read CODEOWNERS file
codeowners_path = '.gitlab/CODEOWNERS'
if not os.path.exists(codeowners_path):
    raise FileNotFoundError(f"{codeowners_path} not found")

with open(codeowners_path, 'r') as file:
    lines = file.readlines()

# Parse CODEOWNERS file
codeowners_rules = []
general_reviewers = []
wildcard_reviewers = []

is_general_reviewers = False

for line in lines:
    line = line.strip()
    if line and not line.startswith('#'):
        if 'General reviewers' in line and (line.startswith('[') or line.startswith('^[')):
            is_general_reviewers = True
        elif line.startswith('['):
            is_general_reviewers = False
        else:
            parts = line.split()
            pattern = parts[0]
            users = [user.lstrip('@') for user in parts[1:]]  # Remove '@' from usernames
            if is_general_reviewers:
                general_reviewers.extend(users)
            elif pattern == '*':
                wildcard_reviewers = users
            else:
                codeowners_rules.append((pattern, users))

print("Codeowners rules:", codeowners_rules)
print("General reviewers:", general_reviewers)
print("Wildcard reviewers:", wildcard_reviewers)

default_assignee = "unused"
default_reviewer = "unused"

# Get the MR author
mr_author_username = merge_request.author['username']
print(f"Merge request author: {mr_author_username}")

# Function to find assignees and reviewers based on the file path
def find_assignees_and_reviewers(file_path):
    assignees = set()
    reviewers = set()
    matched_specific_pattern = False

    print(f"Checking file: {file_path}")

    # Check for specific patterns first
    for pattern, users in codeowners_rules:
        if fnmatch.fnmatch(file_path, pattern):
            print(f"Pattern matched: {pattern} for file: {file_path}")
            assignees.update(users)
            reviewers.update(users)
            matched_specific_pattern = True

    # If no specific pattern matched, use wildcard reviewers
    if not matched_specific_pattern:
        print(f"No specific pattern matched for file: {file_path}. Using wildcard reviewers.")
        reviewers.update(wildcard_reviewers)

    # If still no reviewers and no specific pattern was matched, use general reviewers
    if not reviewers and not matched_specific_pattern:
        print(f"No wildcard reviewers found for file: {file_path}. Using general reviewers.")
        reviewers.update(general_reviewers)

    # If no assignees found, use default assignee
    if not assignees:
        assignees.add(default_assignee)

    # If no reviewers found, use default reviewer
    if not reviewers:
        reviewers.add(default_reviewer)

    print(f"File path: {file_path}, Assignees: {list(assignees)}, Reviewers: {list(reviewers)}")
    return list(assignees), list(reviewers)

# Get the list of changed files in the merge request
changed_files = [change['new_path'] for change in merge_request.changes()['changes']]
print("Changed files:", changed_files)

# Determine assignees and reviewers for the changed files
assignees_set = set()
reviewers_set = set()

for file_path in changed_files:
    assignees, reviewers = find_assignees_and_reviewers(file_path)
    print(f"File path: {file_path}, Assignees: {assignees}, Reviewers: {reviewers}")
    assignees_set.update(assignees)
    reviewers_set.update(reviewers)

# Add the MR author to the assignees if the constant is set to True
if INCLUDE_MR_AUTHOR_AS_ASSIGNEE:
    assignees_set.add(mr_author_username)

# Ensure there is at least one assignee and it's not 'unused'
if REPLACE_UNUSED_WITH_GENERAL_REVIEWERS and ('unused' in assignees_set or not assignees_set):
    # Assign general reviewers as assignees if the 'unused' assignee is set
    print(f"'unused' found in assignees. Using general reviewers as assignees: {general_reviewers}")
    assignees_set.discard('unused')
    assignees_set.update(general_reviewers)

# Ensure there is at least one reviewer and it's not 'unused'
if REPLACE_UNUSED_WITH_GENERAL_REVIEWERS and ('unused' in reviewers_set or not reviewers_set):
    # Assign general reviewers as reviewers if the 'unused' reviewer is set
    print(f"'unused' found in reviewers. Using general reviewers as reviewers: {general_reviewers}")
    reviewers_set.discard('unused')
    reviewers_set.update(general_reviewers)

print("Assignees set:", assignees_set)
print("Reviewers set:", reviewers_set)

# Get the existing assignees and reviewers if the constant is set to True
if KEEP_EXISTING_ASSIGNEES_AND_REVIEWERS:
    existing_assignees = {assignee['username'] for assignee in merge_request.assignees}
    existing_reviewers = {reviewer['username'] for reviewer in merge_request.reviewers}
    assignees_set.update(existing_assignees)
    reviewers_set.update(existing_reviewers)

print("Final Assignees set:", assignees_set)
print("Final Reviewers set:", reviewers_set)

# Get the user IDs for the assignees and reviewers
assignee_ids = []
reviewer_ids = []

for username in assignees_set:
    users = gl.users.list(username=username)
    print(f"Searching for user: {username}, Found: {users}")
    if users:
        assignee_ids.append(users[0].id)
    else:
        print(f"User not found: {username}")

for username in reviewers_set:
    users = gl.users.list(username=username)
    print(f"Searching for user: {username}, Found: {users}")
    if users:
        reviewer_ids.append(users[0].id)
    else:
        print(f"User not found: {username}")

print("Assignee IDs:", assignee_ids)
print("Reviewer IDs:", reviewer_ids)

# Assign assignees and reviewers to the merge request
merge_request.assignee_ids = assignee_ids
merge_request.reviewer_ids = reviewer_ids

# Add labels
merge_request.labels += [
    'needreview'
]

merge_request.save()

